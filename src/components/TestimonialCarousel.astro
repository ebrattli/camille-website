---
import Testimonial from './Testimonial.astro';
import { Icon } from 'astro-icon/components';

interface TestimonialItem {
  quote: string;
  author: string;
  role?: string;
  company?: string;
  category?: string;
  imageUrl?: string;
}

interface Props {
  testimonials: TestimonialItem[];
}

const { testimonials } = Astro.props;
---

<div class="testimonial-carousel" aria-roledescription="carousel" aria-label="Client testimonials">
  <style>
    .carousel-container {
      overflow: hidden;
      position: relative;
      width: 100%;
    }
    
    .carousel-track {
      display: flex;
      transition: transform 0.5s ease;
      width: 100%;
    }
    
    .carousel-item {
      flex: 0 0 100%;
      width: 100%;
      scroll-snap-align: start;
    }
    
    .carousel-nav-button {
      transition: transform 0.2s, opacity 0.2s;
    }
    
    .carousel-nav-button:hover {
      transform: scale(1.1);
      opacity: 1;
    }
    
    .carousel-nav-button:active {
      transform: scale(0.95);
    }
  </style>

  <div class="carousel-container rounded-box shadow-lg">
    <div class="carousel-track" id="testimonialTrack">
      {testimonials.map((testimonial, index) => (
        <div 
          class="carousel-item"
          data-index={index}
          aria-label={`Testimonial ${index + 1} of ${testimonials.length}`}
          aria-hidden={index !== 0 ? "true" : "false"}
        >
          <div class="flex justify-center w-full px-4 py-8">
            <div class="max-w-3xl w-full mx-auto">
              <Testimonial
                quote={testimonial.quote}
                author={testimonial.author}
                role={testimonial.role}
                company={testimonial.company}
                category={testimonial.category}
                imageUrl={testimonial.imageUrl}
              />
            </div>
          </div>
        </div>
      ))}
    </div>
    
    <div class="absolute flex justify-between transform -translate-y-1/2 left-5 right-5 top-1/2 z-20">
      <button 
        class="btn btn-circle btn-primary text-primary-content carousel-nav-button prev"
        aria-label="Previous testimonial"
      >
        <Icon name="mdi:chevron-left" class="w-6 h-6" />
      </button>
      <button 
        class="btn btn-circle btn-primary text-primary-content carousel-nav-button next"
        aria-label="Next testimonial"
      >
        <Icon name="mdi:chevron-right" class="w-6 h-6" />
      </button>
    </div>
  </div>

  <div class="flex justify-center w-full py-2 gap-2 mt-4">
    {testimonials.map((_, index) => (
      <button 
        class={`btn btn-circle btn-sm indicator-btn ${index === 0 ? 'btn-primary' : 'btn-outline'}`}
        data-index={index}
        aria-label={`Go to testimonial ${index + 1}`}
      >
        {index + 1}
      </button>
    ))}
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const carouselTrack = document.getElementById('testimonialTrack');
    if (!carouselTrack) return;
    
    const carousel = carouselTrack.closest('.carousel-container');
    const slides = Array.from(carouselTrack.querySelectorAll('.carousel-item'));
    const prevBtn = carousel?.querySelector('.carousel-nav-button.prev');
    const nextBtn = carousel?.querySelector('.carousel-nav-button.next');
    const indicatorBtns = Array.from(document.querySelectorAll('.indicator-btn'));
    
    let currentIndex = 0;
    const totalSlides = slides.length;
    
    // Function to navigate to a specific slide with smooth animation
    const goToSlide = (index) => {
      // Ensure index is within bounds
      if (index < 0) index = totalSlides - 1;
      if (index >= totalSlides) index = 0;
      
      // Apply smooth horizontal slide transition
      carouselTrack.style.transform = `translateX(-${index * 100}%)`;
      
      // Update indicator buttons
      indicatorBtns.forEach((btn, i) => {
        if (i === index) {
          btn.classList.add('btn-primary');
          btn.classList.remove('btn-outline');
          btn.setAttribute('aria-current', 'true');
        } else {
          btn.classList.remove('btn-primary');
          btn.classList.add('btn-outline');
          btn.removeAttribute('aria-current');
        }
      });
      
      // Update ARIA attributes
      slides.forEach((slide, i) => {
        if (i === index) {
          slide.setAttribute('aria-hidden', 'false');
        } else {
          slide.setAttribute('aria-hidden', 'true');
        }
      });
      
      currentIndex = index;
    };
    
    // Add click event to navigation buttons
    if (prevBtn) {
      prevBtn.addEventListener('click', () => {
        goToSlide(currentIndex - 1);
      });
    }
    
    if (nextBtn) {
      nextBtn.addEventListener('click', () => {
        goToSlide(currentIndex + 1);
      });
    }
    
    // Add click event to indicator buttons
    indicatorBtns.forEach((btn) => {
      btn.addEventListener('click', () => {
        const index = parseInt(btn.getAttribute('data-index') || '0');
        goToSlide(index);
      });
    });
    
    // Handle touch events for swiping
    let touchStartX = 0;
    let touchEndX = 0;
    
    carousel?.addEventListener('touchstart', (e) => {
      touchStartX = e.changedTouches[0].screenX;
    });
    
    carousel?.addEventListener('touchend', (e) => {
      touchEndX = e.changedTouches[0].screenX;
      handleSwipe();
    });
    
    const handleSwipe = () => {
      const swipeThreshold = 50;
      if (touchStartX - touchEndX > swipeThreshold) {
        // Swipe left, go to next slide
        goToSlide(currentIndex + 1);
      } else if (touchEndX - touchStartX > swipeThreshold) {
        // Swipe right, go to previous slide
        goToSlide(currentIndex - 1);
      }
    };
    
    // Handle keyboard navigation
    document.addEventListener('keydown', (e) => {
      const carousel = document.querySelector('.testimonial-carousel');
      if (!carousel) return;
      
      // Only handle keyboard if carousel is in viewport
      const rect = carousel.getBoundingClientRect();
      const isInViewport = rect.top < window.innerHeight && rect.bottom > 0;
      
      if (isInViewport) {
        if (e.key === 'ArrowLeft') {
          goToSlide(currentIndex - 1);
        } else if (e.key === 'ArrowRight') {
          goToSlide(currentIndex + 1);
        }
      }
    });
    
    // Initialize first slide
    goToSlide(0);
  });
</script>