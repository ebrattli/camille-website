---
import Testimonial from "./Testimonial.astro";
import { Icon } from "astro-icon/components";

interface TestimonialItem {
  quote: string;
  author: string;
  role?: string;
  company?: string;
  category?: string;
  imageUrl?: string;
}

interface Props {
  testimonials: TestimonialItem[];
}

const { testimonials } = Astro.props;
---

<div
  class="testimonial-carousel"
  aria-roledescription="carousel"
  aria-label="Client testimonials"
>
  <div
    class="rounded-box bg-base-100 relative w-full overflow-hidden shadow-lg"
  >
    <div
      class="flex w-full transition-transform duration-500 ease-in-out"
      id="testimonialTrack"
    >
      {
        testimonials.map((testimonial, index) => (
          <div
            class="w-full flex-shrink-0"
            data-index={index}
            aria-label={`Testimonial ${index + 1} of ${testimonials.length}`}
            aria-hidden={index !== 0 ? "true" : "false"}
          >
            <div class="flex w-full justify-center px-4 py-8">
              <div class="mx-auto w-full max-w-3xl">
                <Testimonial
                  quote={testimonial.quote}
                  author={testimonial.author}
                  role={testimonial.role}
                  company={testimonial.company}
                  category={testimonial.category}
                  imageUrl={testimonial.imageUrl}
                />
              </div>
            </div>
          </div>
        ))
      }
    </div>

    <div
      class="absolute top-1/2 right-5 left-5 z-20 flex -translate-y-1/2 justify-between"
    >
      <button
        class="btn btn-circle btn-primary text-primary-content opacity-80 transition-all duration-200 hover:scale-110 hover:opacity-100 active:scale-95"
        aria-label="Previous testimonial"
        id="prevButton"
      >
        <Icon name="mdi:chevron-left" class="h-6 w-6" />
      </button>
      <button
        class="btn btn-circle btn-primary text-primary-content opacity-80 transition-all duration-200 hover:scale-110 hover:opacity-100 active:scale-95"
        aria-label="Next testimonial"
        id="nextButton"
      >
        <Icon name="mdi:chevron-right" class="h-6 w-6" />
      </button>
    </div>
  </div>

  <div class="mt-4 flex w-full justify-center gap-2 py-2">
    {
      testimonials.map((_, index) => (
        <button
          class={`btn btn-circle btn-sm ${index === 0 ? "btn-primary" : "btn-outline"}`}
          data-index={index}
          aria-label={`Go to testimonial ${index + 1}`}
        >
          {index + 1}
        </button>
      ))
    }
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const track = document.getElementById("testimonialTrack");
    if (!track) return;

    const container = track.closest(".relative");
    const slides = Array.from(track.children);
    const prevBtn = document.getElementById("prevButton");
    const nextBtn = document.getElementById("nextButton");
    const indicatorBtns = Array.from(
      document.querySelectorAll(".testimonial-carousel .mt-4 .btn"),
    );

    let currentIndex = 0;
    const totalSlides = slides.length;

    // Function to navigate to a specific slide with smooth animation
    const goToSlide = (index: number) => {
      // Ensure index is within bounds
      if (index < 0) index = totalSlides - 1;
      if (index >= totalSlides) index = 0;

      // Apply smooth horizontal slide transition
      track.style.transform = `translateX(-${index * 100}%)`;

      // Update indicator buttons
      indicatorBtns.forEach((btn, i) => {
        if (i === index) {
          btn.classList.add("btn-primary");
          btn.classList.remove("btn-outline");
          btn.setAttribute("aria-current", "true");
        } else {
          btn.classList.remove("btn-primary");
          btn.classList.add("btn-outline");
          btn.removeAttribute("aria-current");
        }
      });

      // Update ARIA attributes
      slides.forEach((slide, i) => {
        if (i === index) {
          slide.setAttribute("aria-hidden", "false");
        } else {
          slide.setAttribute("aria-hidden", "true");
        }
      });

      currentIndex = index;
    };

    // Event listeners for navigation buttons
    prevBtn?.addEventListener("click", () => {
      goToSlide(currentIndex - 1);
    });

    nextBtn?.addEventListener("click", () => {
      goToSlide(currentIndex + 1);
    });

    // Event listeners for indicator buttons
    indicatorBtns.forEach((btn) => {
      btn.addEventListener("click", () => {
        const index = parseInt(btn.getAttribute("data-index") || "0");
        goToSlide(index);
      });
    });

    // Handle touch events for swiping
    let touchStartX = 0;
    let touchEndX = 0;

    container?.addEventListener("touchstart", (e) => {
      touchStartX = (e as TouchEvent).changedTouches[0].screenX;
    });

    container?.addEventListener("touchend", (e) => {
      touchEndX = (e as TouchEvent).changedTouches[0].screenX;
      handleSwipe();
    });

    const handleSwipe = () => {
      const swipeThreshold = 50;
      if (touchStartX - touchEndX > swipeThreshold) {
        // Swipe left, go to next slide
        goToSlide(currentIndex + 1);
      } else if (touchEndX - touchStartX > swipeThreshold) {
        // Swipe right, go to previous slide
        goToSlide(currentIndex - 1);
      }
    };

    // Auto-advance slides every 8 seconds if desired
    // Uncomment this code to enable auto-advance
    /*
    const autoAdvanceInterval = setInterval(() => {
      goToSlide(currentIndex + 1);
    }, 8000);

    // Stop auto-advance on user interaction
    container?.addEventListener("mouseenter", () => {
      clearInterval(autoAdvanceInterval);
    });
    */

    // Handle keyboard navigation
    document.addEventListener("keydown", (e) => {
      const carouselElement = document.querySelector(".testimonial-carousel");
      if (!carouselElement) return;

      // Only handle keyboard if carousel is in viewport
      const rect = carouselElement.getBoundingClientRect();
      const isInViewport = rect.top < window.innerHeight && rect.bottom > 0;

      if (isInViewport) {
        if (e.key === "ArrowLeft") {
          goToSlide(currentIndex - 1);
        } else if (e.key === "ArrowRight") {
          goToSlide(currentIndex + 1);
        }
      }
    });

    // Initialize first slide
    goToSlide(0);
  });
</script>
