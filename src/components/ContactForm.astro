---
import { Icon } from "astro-icon/components";

interface FormField {
  id: string;
  label: string;
  type: "text" | "email" | "tel" | "select" | "textarea" | "checkbox";
  placeholder?: string;
  required?: boolean;
  options?: {
    value: string;
    label: string;
    disabled?: boolean;
    selected?: boolean;
  }[];
}

interface Props {
  title: string;
  fields: FormField[];
  submitText: string;
  formId?: string;
}

const {
  title,
  fields,
  submitText = "Send Message",
  formId = "contact-form",
} = Astro.props;

// Group fields by type to handle them separately
const regularFields = fields.filter(
  (field) => field.type !== "textarea" && field.type !== "checkbox",
);
const textareaField = fields.find((field) => field.type === "textarea");
const checkboxFields = fields.filter((field) => field.type === "checkbox");
---

<div class="card bg-base-100 shadow-md">
  <div class="card-body p-8">
    <h2 class="card-title mb-8 text-2xl">{title}</h2>

    <form id={formId} class="space-y-8" data-form-id={formId}>
      <!-- Regular fields (text, email, tel, select) -->
      <div class="grid grid-cols-1 gap-6 md:grid-cols-2">
        {
          regularFields.map((field) => (
            <div class="form-control">
              <label for={field.id} class="label font-medium">
                <span class="label-text">
                  {field.label}
                  {field.required && (
                    <span class="text-error ml-1" aria-hidden="true">
                      *
                    </span>
                  )}
                </span>
              </label>

              {field.type === "text" ||
              field.type === "email" ||
              field.type === "tel" ? (
                <input
                  type={field.type}
                  id={field.id}
                  name={field.id}
                  placeholder={field.placeholder}
                  class="input input-bordered w-full"
                  required={field.required}
                  aria-required={field.required ? "true" : "false"}
                />
              ) : field.type === "select" ? (
                <div class="relative">
                  <select
                    id={field.id}
                    name={field.id}
                    class="select select-bordered w-full"
                    required={field.required}
                    aria-required={field.required ? "true" : "false"}
                  >
                    {field.options?.map((option) => (
                      <option
                        value={option.value}
                        disabled={option.disabled}
                        selected={option.selected}
                      >
                        {option.label}
                      </option>
                    ))}
                  </select>
                  <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700" aria-hidden="true">
                    <Icon name="mdi:chevron-down" class="h-4 w-4" />
                  </div>
                </div>
              ) : null}
            </div>
          ))
        }
      </div>

      <!-- Visual separator -->
      <div class="border-base-300 mt-6 border-t"></div>

      <!-- Message textarea field - separated and prominent -->
      {
        textareaField && (
          <div class="form-control mt-6">
            <label for={textareaField.id} class="label mb-2">
              <span class="label-text text-lg font-medium">
                {textareaField.label}
                {textareaField.required && (
                  <span class="text-error ml-1" aria-hidden="true">
                    *
                  </span>
                )}
              </span>
            </label>
            <textarea
              id={textareaField.id}
              name={textareaField.id}
              placeholder={textareaField.placeholder}
              class="textarea textarea-bordered focus:border-primary h-64 w-full rounded-xl border-2 text-base"
              required={textareaField.required}
              aria-required={textareaField.required ? "true" : "false"}
            />
            <p class="mt-2 text-xs text-gray-500">
              Feel free to write a detailed message about your needs
            </p>
          </div>
        )
      }

      <!-- Checkbox fields -->
      {
        checkboxFields.map((field) => (
          <div class="form-control mt-6">
            <div class="flex items-center gap-2">
              <input
                type="checkbox"
                id={field.id}
                name={field.id}
                class="checkbox checkbox-primary"
                required={field.required}
                aria-required={field.required ? "true" : "false"}
              />
              <label for={field.id} class="label-text cursor-pointer">
                {field.label}
              </label>
            </div>
          </div>
        ))
      }

      <div class="form-control mt-10">
        <button
          type="submit"
          class="btn btn-primary btn-lg transition-transform duration-300 hover:scale-105 active:scale-95"
        >
          {submitText}
          <Icon name="mdi:send" class="ml-2 h-5 w-5" aria-hidden="true" />
        </button>
      </div>
    </form>

    <!-- Success/Error Message (hidden by default) -->
    <div id="form-success" class="alert alert-success mt-6 hidden">
      <Icon name="mdi:check-circle" class="h-6 w-6 shrink-0" aria-hidden="true" />
      <span>Your message has been sent successfully!</span>
    </div>

    <div id="form-error" class="alert alert-error mt-6 hidden">
      <Icon name="mdi:close-circle" class="h-6 w-6 shrink-0" aria-hidden="true" />
      <span>There was an error sending your message. Please try again.</span>
    </div>
  </div>
</div>

<script is:inline>
  // Simple form handling script
  document.addEventListener("DOMContentLoaded", function () {
    // Get the form ID from data attribute
    const contactForm = document.querySelector("form[data-form-id]");
    const formId = contactForm?.getAttribute("data-form-id");
    var form = document.getElementById(formId);
    var successMessage = document.getElementById("form-success");
    var errorMessage = document.getElementById("form-error");

    if (form) {
      form.addEventListener("submit", function (e) {
        e.preventDefault();

        // Hide any existing messages
        if (successMessage) successMessage.classList.add("hidden");
        if (errorMessage) errorMessage.classList.add("hidden");

        // In a real implementation, you would send the form data to a server
        // For now, we'll just simulate a successful submission

        // Simulate form submission delay
        setTimeout(function () {
          try {
            // Show success message
            if (successMessage) successMessage.classList.remove("hidden");

            // Reset form
            form.reset();
          } catch (error) {
            // Show error message
            if (errorMessage) errorMessage.classList.remove("hidden");
            console.error("Form submission error:", error);
          }
        }, 1000);
      });
    }
  });
</script>